{% from 'invisibleroads_uploads:templates/parts.jinja2' import upload_button %}
{% set maximum_row_count = 100 %}

{% macro head_style_loaded(request) %}{% endmacro %}

{% macro head_style_inline(request) %}{% endmacro %}

{% macro head_script_inline(request) %}
x = CC.table = {};
x.import_url = '{{ request.route_path('table/import_table') }}';
{% endmacro %}

{% macro body_script_loaded(request) %}{% endmacro %}

{% macro body_script_inline(request) %}{% endmacro %}

{% macro render_argument(request, data_item) %}
{% set key = data_item.key %}
{% set table = data_item.value %}
{{ upload_button(request, id='%s-upload-button' % key, text='Upload', class='btn-lg table-upload', data_name=key) }}

{% if table is not none and table.index.shape[0] > maximum_row_count %}
{{ render_property(request, data_item, class='', editable=False) }}
<input name="{{ key }}" type="hidden" value="{{ data_item.file_location }}">
{% else %}
{{ render_property(request, data_item, class='editable', editable=True) }}
<input name="{{ key }}_csv" type="hidden">
{% endif %}

{% endmacro %}

{% macro render_property(request, data_item, stamp='', class='', editable=False) %}
{% set key = data_item.key + stamp %}
<div id="{{ key }}">

{% set table = data_item.value %}

<div id="{{ key }}-scrollable" class="scrollable">
{% if table is not none %}

{% set row_count = table.index.shape[0] %}
{% set is_big = row_count > maximum_row_count %}

{% if is_big %}
{% set table = table[:maximum_row_count] %}
{% set class = '' %}
{% set editable = False %}
{% endif %}

<table id="{{ key }}-table" class="table {{ class }}" {% if editable %}contenteditable="true"{% endif %}>
<thead>
<tr>{% for column in table.columns %}<th>{{ column }}</th>{% endfor %}</tr>
</thead>
<tbody>
{% for index, row in table.fillna('').iterrows() %}
<tr>{% for column in row %}<td>{{ column }}</td>{% endfor %}</tr>
{% endfor %}
</tbody>
</table>
{% else %}

{% set is_big = False %}
{% endif %}
</div>

{% if is_big %}
<div class="alert alert-warning">Showing first {{ '{:,}'.format(maximum_row_count) }} out of {{ '{:,}'.format(row_count) }} rows</div>
{% endif %}

</div>
{% endmacro %}

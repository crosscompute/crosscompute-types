{% macro head_style_loaded() %}
<link rel="stylesheet" href="//api.mapbox.com/mapbox.js/v2.2.4/mapbox.css">
{% endmacro %}

{% macro head_style_inline() %}
.geotable-map {height: 300px}
{% endmacro %}

{% macro head_script_inline() %}
var map_definitions = {};
{% endmacro %}

{% macro body_script_loaded() %}
<script src='//api.mapbox.com/mapbox.js/v2.2.4/mapbox.js'></script>
{% endmacro %}

{% macro body_script_inline() %}
function get_tile_layer_id(key) {
  try {
    return /(streets|light|dark|satellite|streets-satellite|wheatpaste|streets-basic|comic|outdoors|run-bike-hike|pencil|pirates|emerald|high-contrast)_geotable/.exec(key)[1];
  } catch(e) {
    return 'streets';
  }
}
L.mapbox.accessToken = '{{ get_os_environment_variable('MAPBOX_TOKEN', 'pk.eyJ1IjoibWFwYm94IiwiYSI6IlhHVkZmaW8ifQ.hAMX5hSW-QnTeRCMAy9A8Q') }}';
$.each(map_definitions, function(k, v) {
  var map = L.mapbox.map(k + '_', 'mapbox.' + get_tile_layer_id(k)), features = [];
  var rows = v[0], properties = v[1];
  for (var i = 0; i < rows.length; i++) {
    var row = rows[i], geometry_type_id = row[0], geometry_coordinates = row[1], local_properties = $.extend({'color': 'black', 'weight': 3, 'opacity': 0.75, 'fillOpacity': 0.5}, properties, row[2]), feature;

    switch(geometry_type_id) {
      case 1:
        feature = L.circle(geometry_coordinates, local_properties['radius'] || 10, local_properties);
        break;
      case 2:
        // Polyline
        break;
      case 3:
        // Polygon
        break;
      case 4:
        break;
      case 5:
        // MultiPolyline
        break;
      case 6:
        // MultiPolygon
        break;
    }

    features.push(feature);
  }
  map.fitBounds(L.featureGroup(features).addTo(map).getBounds());
});
{% endmacro %}

{% macro render_query(key) %}
{% endmacro %}

{% macro render_value(key, value) %}
{% set items, properties, columns = value %}
<h3>{{ key }}</h3>
<div id="{{ key }}_" class="geotable-map"></div>
<table id="{{ key }}__" class="table">
<thead><tr>{% for column in columns %}<th>{{ column }}</th>{% endfor %}</tr></thead>
{% for geometry_type_id, geometry_coordinates, local_properties, local_table in items %}
<tbody id="{{ key }}__{{ loop.index }}">
{%- for index, row in local_table.fillna('').iterrows() -%}
<tr>{% for column in row %}<td>{{ column }}</td>{% endfor %}</tr>
{%- endfor -%}
</tbody>
{% endfor %}
</table>
<script>
map_definitions['{{ key }}'] = [[
{% for geometry_type_id, geometry_coordinates, local_properties, local_table in items %}
[{{ geometry_type_id }}, {{ geometry_coordinates }}, {{ local_properties }}]
{%- if not loop.last %},{% endif %}
{% endfor %}], {{ properties }}];
</script>
{%- endmacro %}
